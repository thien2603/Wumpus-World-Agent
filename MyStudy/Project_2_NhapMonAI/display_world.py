import SmartAgent
import random
import heapq
import math
from collections import defaultdict

# ====== C·∫§U H√åNH ======
N = 8  # K√≠ch th∆∞·ªõc b·∫£n ƒë·ªì (c√≥ th·ªÉ override trong main)
K = 2  # S·ªë l∆∞·ª£ng Wumpus
PIT_PROB = 0.1

DIRECTIONS = ['N', 'E', 'S', 'W']
DX = {'N': 0, 'E': 1, 'S': 0, 'W': -1}
DY = {'N': 1, 'E': 0, 'S': -1, 'W': 0}

# ====== KI·ªÇM TRA ƒê∆Ø·ªúNG ƒêI C√ì TH·ªÇ ƒê·∫æN V√ÄO √î C√ì V√ÄNG ======
def is_reachable(path, world):
    visited = [[False for _ in range(N)] for _ in range(N)]
    path.add((0, 0))
    stack = [(0, 0)]
    visited[0][0] = True
    while stack:
        x, y = stack.pop()
        if (world[y][x]["gold"]):
            return True
        else:
            for dx, dy in [(0,1),(0,-1),(1,0),(-1,0)]:
                nx, ny = x + dx, y + dy
                if 0 <= nx < N and 0 <= ny < N:
                    if not visited[ny][nx] and not world[ny][nx]["pit"] and not world[ny][nx]["wumpus"]:
                        visited[ny][nx] = True
                        path.add((nx, ny))
                        stack.append((nx, ny))
    return False

# ====== KH·ªûI T·∫†O B·∫¢N ƒê·ªí ======
def create_world():
    while True:
        world = [[{
            "wumpus": False,
            "pit": False,
            "gold": False,
            "visited": False,
            "percept": {"stench": False, "breeze": False, "glitter": False}
        } for _ in range(N)] for _ in range(N)]

        # ƒê·∫∑t Wumpus
        wumpus_positions = set()
        while len(wumpus_positions) < K:
            x, y = random.randint(0, N-1), random.randint(0, N-1)
            if (x, y) != (0, 0) and (x, y) != (1, 0) and (x, y) != (0, 1) and not world[y][x]["wumpus"]:
                world[y][x]["wumpus"] = True
                wumpus_positions.add((x, y))

        # ƒê·∫∑t Pit
        for y in range(N):
            for x in range(N):
                if (x, y) != (0, 0) and not world[y][x]["wumpus"]:
                    if (x, y) != (1, 0) and (x, y) != (0, 1):  # ƒê·∫£m b·∫£o kh√¥ng ƒë·∫∑t pit ·ªü (0,1) v√† (1,0)
                        if random.random() < PIT_PROB:
                            world[y][x]["pit"] = True

        # ƒê·∫∑t Gold (ng·∫´u nhi√™n)
        while True:
            x, y = random.randint(0, N-1), random.randint(0, N-1)
            if (x, y) != (0, 0) and not world[y][x]["wumpus"] and not world[y][x]["pit"]:
                world[y][x]["gold"] = True
                break

        # T√≠nh percept cho m·ªçi √¥
        for y in range(N):
            for x in range(N):
                percept = {"stench": False, "breeze": False, "glitter": False}
                for dx, dy in [(0,1), (0,-1), (1,0), (-1,0)]:
                    nx, ny = x+dx, y+dy
                    if 0 <= nx < N and 0 <= ny < N:
                        if world[ny][nx]["wumpus"]:
                            percept["stench"] = True
                        if world[ny][nx]["pit"]:
                            percept["breeze"] = True
                if world[y][x]["gold"]:
                    percept["glitter"] = True
                world[y][x]["percept"] = percept

        path = set()
        if is_reachable(path, world):
            return world, path
        else:
            continue

# ====== HI·ªÇN TH·ªä SMART AGENT VIEW ======
def display_world2(world, agent):
    print("\n=== SMART AGENT VIEW ===")
    for y in reversed(range(N)):
        for x in range(N):
            pos = (x, y)
            cell = world[y][x]
            char = '?'

            if (agent.x, agent.y) == pos:
                char = 'A'
            elif pos in agent.safe:
                char = 'O'
            elif pos in agent.possible_pits or pos in agent.possible_wumpus:
                char = '!'
            elif pos in agent.visited:
                char = '.'

            print(char, end=' ')
        print()
    print(f"Agent at ({agent.x}, {agent.y})  dir={agent.dir}  score={agent.score}")
    if agent.found_gold:
        print("üí∞ Agent has found the gold!")

# ============ MOVE WUMPUS FUNCTION =============
def move_wumpuses(world):
    """
    Di chuy·ªÉn m·ªói Wumpus 1 √¥ sang 1 √¥ k·ªÅ ng·∫´u nhi√™n (kh√¥ng ph·∫£i pit).
    C·∫≠p nh·∫≠t l·∫°i percept["stench"] cho to√†n b·ªô b·∫£n ƒë·ªì sau khi di chuy·ªÉn.
    Tr·∫£ v·ªÅ set v·ªã tr√≠ Wumpus m·ªõi.
    """
    Nloc = len(world)
    w_positions = [(x, y) for y in range(Nloc) for x in range(Nloc) if world[y][x]["wumpus"]]
    new_positions = set()

    # t·∫°m x√≥a t·∫•t c·∫£ wumpus (ch√∫ng ta s·∫Ω ƒë·∫∑t l·∫°i)
    for x, y in w_positions:
        world[y][x]["wumpus"] = False

    for (x, y) in w_positions:
        # t√¨m c√°c √¥ k·ªÅ h·ª£p l·ªá ƒë·ªÉ di chuy·ªÉn t·ªõi (kh√¥ng ph·∫£i pit)
        neighbors = []
        for dx, dy in [(0,1),(0,-1),(1,0),(-1,0)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < Nloc and 0 <= ny < Nloc:
                if not world[ny][nx]["pit"]:
                    neighbors.append((nx, ny))
        # ch·ªçn √¥ ng·∫´u nhi√™n n·∫øu c√≥, n·∫øu kh√¥ng th√¨ ·ªü l·∫°i
        if neighbors:
            nx, ny = random.choice(neighbors)
        else:
            nx, ny = x, y
        # tr√°nh tr√πng ch·ªçn n·∫øu c√≥ th·ªÉ
        if (nx, ny) in new_positions:
            alt = [p for p in neighbors if p not in new_positions]
            if alt:
                nx, ny = random.choice(alt)
            # else keep (nx,ny) and allow stacking
        world[ny][nx]["wumpus"] = True
        new_positions.add((nx, ny))

    # c·∫≠p nh·∫≠t percept stench: x√≥a t·∫•t c·∫£ tr∆∞·ªõc, sau ƒë√≥ ƒë·∫∑t theo new_positions
    for yy in range(Nloc):
        for xx in range(Nloc):
            world[yy][xx]["percept"]["stench"] = False
    for (wx, wy) in new_positions:
        for ddx, ddy in [(0,1),(0,-1),(1,0),(-1,0)]:
            nx, ny = wx + ddx, wy + ddy
            if 0 <= nx < Nloc and 0 <= ny < Nloc:
                world[ny][nx]["percept"]["stench"] = True

    return new_positions


# ====== HI·ªÇN TH·ªä B·∫¢N ƒê·ªí (map & full content) ======
def display_world(world, agent, path):
    print("\n=== WORLD MAP ===")
    for y in reversed(range(N)):
        for x in range(N):
            cell = world[y][x]
            char = '?'
            if agent.x == x and agent.y == y:
                char = 'A'
            elif (x, y) in path:
                char = '1'
            elif cell["visited"]:
                char = '.'
            print(char, end=' ')
        print()
    print(f"Agent at ({agent.x}, {agent.y})")
    if getattr(agent, "has_gold", False):
        print("üí∞ Status: Agent HAS the gold!")
    else:
        print("üîç Status: Agent does NOT have the gold.")
    for y in reversed(range(N)):
        for x in range(N):
            cell = world[y][x]
            symbol = "."
            if cell["wumpus"]:
                symbol = "W"
            elif cell["pit"]:
                symbol = "P"
            elif cell["gold"]:
                symbol = "G"
            print(symbol, end=" ")
        print()